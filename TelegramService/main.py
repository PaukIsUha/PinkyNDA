import database as db
import os
from typing import Callable, Awaitable, Any, Dict

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from tasks import log_event
from configs import CONFIG_BOT


###############################################################################
# Inline keyboard builders                                                   #
###############################################################################

def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíñ –î–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", callback_data="about_me")],
        [InlineKeyboardButton("ü§î –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="what_i_do")],
        [InlineKeyboardButton("üíª –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
    ])


def kb_about_me() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§î –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data="what_i_do")],
        [InlineKeyboardButton("üíª –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
    ])


def kb_what_i_do() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üíª –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è", callback_data="register")],
    ])


def kb_register() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")],
    ])


###############################################################################
# Handler functions                                                          #
###############################################################################

@log_event("start")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start ‚Äî only once per user."""
    user_data = context.user_data
    if user_data.get("started"):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ /start

    user_data["started"] = True

    await update.message.reply_html(
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø Pinky ‚Äì —Ç–≤–æ—è digital-–ø–æ–¥—Ä—É–≥–∞ üíï –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?</b>",
        reply_markup=kb_start(),
    )


@log_event("about_me")
async def about_me(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.message:
        await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_text(
        "–Ø —Ç–≤–æ—è –Ω–æ–≤–∞—è –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞! –Ø —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Ñ–æ—Ç–æ, –ø–æ–º–æ–≥–∞—Ç—å –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–∞—Ö, "
        "–ø–æ–¥–±–∏—Ä–∞—Ç—å —Å—Ç–∏–ª—å –∏ –¥–∞–∂–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º?",
        reply_markup=kb_about_me(),
    )


@log_event("what_i_do")
async def what_i_do(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.message:
        await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_markdown_v2(
        (
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–º, —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–∞—Ä–Ω–µ–º, –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—å–µ "
            "–Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ –∏–ª–∏ –¥–∞–∂–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ —Å–µ–≥–æ–¥–Ω—è —Å–∞–º—ã–µ —Ö–∞–π–ø–æ–≤—ã–µ\. –ù–∞—á–∏–Ω–∞–π —Å–∫–æ—Ä–µ–µ\!"
        ),
        reply_markup=kb_what_i_do(),
    )


@log_event("register")
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.message:
        await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_text(
        (
            "üéâ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª:\n"
            "‚Äì –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n‚Äì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º"
        ),
        reply_markup=kb_register(),
    )


@log_event("agree")
async def agree(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.message:
        await query.edit_message_reply_markup(reply_markup=None)

    await query.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —á–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ –∑–∞–Ω—è—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è ?\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≤–Ω–∏–∑—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç.",
    )

###############################################################################
# Fallback echo for free-text                                                #
###############################################################################


@log_event("free_text")
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    await update.message.reply_text(
        f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ \"{text}\", –Ω–æ —É–∂–µ —É—á—É—Å—å ü§ñ",
    )

###############################################################################
# Application builder                                                        #
###############################################################################


def build_app() -> Application:
    app = ApplicationBuilder().token(CONFIG_BOT.token).build()

    # Commands
    app.add_handler(CommandHandler("start", start))

    # Callback buttons
    app.add_handler(CallbackQueryHandler(about_me, pattern="^about_me$"))
    app.add_handler(CallbackQueryHandler(what_i_do, pattern="^what_i_do$"))
    app.add_handler(CallbackQueryHandler(register, pattern="^register$"))
    app.add_handler(CallbackQueryHandler(agree, pattern="^agree$"))

    # Fallback echo for any text
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    return app


###############################################################################
# Entrypoint                                                                 #
###############################################################################

if __name__ == "__main__":
    application = build_app()
    application.run_polling(allowed_updates=["message", "callback_query"])
