import json
import os
from dotenv import load_dotenv
from fastapi import APIRouter
from openai import AsyncOpenAI
from typing import Optional, Dict, Any

from prompts import topic_system_prompts, CLASSIFIER_PROMPT_TEMPLATE, CLASSIFIER_SYSTEM_PROMPT
from utils import form_messages, encode_image
from pydantic import BaseModel

load_dotenv()
API_KEY = os.getenv("API_KEY")

MODEL_NAME = 'gpt-4.1'  # "gpt-4.1-mini"
client = AsyncOpenAI(api_key=API_KEY)
router = APIRouter(
    prefix='/chat_ai'
)


class InferenceRequest(BaseModel):
    query: str
    topic: str
    base64_image: Optional[str] = None


class ValidationRequest(BaseModel):
    query: str
    chosen_topic: str
    base64_image: Optional[str] = None


@router.post("/pipeline")
async def pipeline_example(chosen_topic: str,
                           query: str,
                           image_path: str | None = None) -> Dict[str, str | None]:
    """
    –ü—Ä–∏–º–µ—Ä –ø–∞–π–ø–ª–∞–π–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    1. –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞ + –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    3. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö (–∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ç–≥)
    4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    
    Args:
        chosen_topic (str): –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–º–∞.
        query (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        image_path (str | None): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    
    Returns:
        response_text: –û—Ç–≤–µ—Ç –ò–ò –∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    """
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    base64_image = encode_image(image_path) if image_path else None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ + —Å—Ç–æ–∏–º–æ—Å—Ç—å
    validation_result = await check_validity_and_cost(query=query, base64_image=base64_image, chosen_topic=chosen_topic)
    is_valid = validation_result['is_valid']
    true_topic = validation_result['true_topic']
    cost = validation_result['cost']

    # –ö–Ω–æ–ø–∫–∞ –±–æ—Ç–∞
    button_is_pressed = False
    if is_valid:
        print(f'–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {cost}üíñ')
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        button_is_pressed = True
    else:
        if true_topic != '–î—Ä—É–≥–æ–µ':
            print(f'–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤ –±–ª–æ–∫: {true_topic}. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {cost}üíñ')
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            button_is_pressed = True
        else:
            print("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Åüòî")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    if button_is_pressed:
        inference_result = await general_inference(query=query, topic=true_topic, base64_image=base64_image)
        response_text = inference_result['response_text']
    else:
        response_text = None
    
    return {
        'response_text': response_text
    }


@router.post("/general_inference")
async def general_inference(payload: InferenceRequest) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ GPT.

    –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    {
        "query": "...",
        "topic": "...",
        "base64_image": "<–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ>"
    }
    """
    topic_system_prompt = topic_system_prompts[payload.topic]

    messages = form_messages(
        base64_image=payload.base64_image,
        system_prompt=topic_system_prompt,
        prompt=payload.query,
    )

    response = await client.responses.create(
        model=MODEL_NAME,
        tools=[{"type": "web_search_preview"}],
        input=messages,
    )

    return {"response_text": response.output_text}


# =========================== VALIDATION =====================================

@router.post("/validation")
async def check_validity_and_cost(payload: ValidationRequest) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ¬´—Å—Ç–æ–∏–º–æ—Å—Ç—å¬ª.

    –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    {
        "chosen_topic": "...",
        "query": "...",
        "base64_image": "<–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ>"
    }
    """
    messages = form_messages(
        base64_image=payload.base64_image,
        system_prompt=CLASSIFIER_SYSTEM_PROMPT,
        prompt=CLASSIFIER_PROMPT_TEMPLATE.format(
            query=payload.query,
            topic=payload.chosen_topic,
        ),
    )

    response = await client.responses.create(
        model=MODEL_NAME,
        input=messages,
    )

    topic_names = [
        "–†–∞–∑–±–æ—Ä –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
        "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è",
        "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ —É—Ö–æ–¥",
        "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç",
        "–°—Ç–∏–ª—å",
        "–£—á—ë–±–∞",
    ]

    try:
        res_dict = json.loads(response.output_text)
        if res_dict["true_topic_idx"] != -1:
            res_dict["true_topic"] = topic_names[res_dict["true_topic_idx"] - 1]
        else:
            res_dict["true_topic"] = "–î—Ä—É–≥–æ–µ"
    except (json.JSONDecodeError, KeyError):
        res_dict = {
            "valid": False,
            "true_topic": "–î—Ä—É–≥–æ–µ",
            "cost": 2,
        }

    return {
        "is_valid": res_dict["valid"],
        "true_topic": res_dict["true_topic"],
        "cost": res_dict["cost"],
    }
